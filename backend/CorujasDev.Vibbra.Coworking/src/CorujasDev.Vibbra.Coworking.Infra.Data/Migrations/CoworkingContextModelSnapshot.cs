// <auto-generated />
using System;
using CorujasDev.Vibbra.Coworking.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CorujasDev.Vibbra.Coworking.Infra.Data.Migrations
{
    [DbContext(typeof(CoworkingContext))]
    partial class CoworkingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CorujasDev.Vibbra.Coworking.Domain.Models.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnName("Cep")
                        .HasColumnType("CHAR(9)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("City")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnName("DateUpdate");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnName("District")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<decimal>("HourlyCost")
                        .HasColumnName("HourlyCost")
                        .HasColumnType("DECIMAL(17,2)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("Image")
                        .HasColumnType("VARCHAR(350)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(150)");

                    b.Property<int>("NumberChairs")
                        .HasColumnName("NumberChairs")
                        .HasColumnType("INT");

                    b.Property<int>("NumberTables")
                        .HasColumnName("NumberTables")
                        .HasColumnType("INT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("State")
                        .HasColumnType("CHAR(2)");

                    b.Property<int>("TypePlace");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CorujasDev.Vibbra.Coworking.Domain.Models.Professional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnName("CPF")
                        .HasColumnType("VARCHAR(14)");

                    b.Property<string>("CelPhone")
                        .HasColumnName("CelPhone")
                        .HasColumnType("VARCHAR(18)");

                    b.Property<string>("City")
                        .HasColumnName("City")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnName("DateUpdate");

                    b.Property<string>("Facebook")
                        .HasColumnName("Facebook")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Linkedin")
                        .HasColumnName("Linkedin")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Profession")
                        .HasColumnName("Profession")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasColumnName("RG")
                        .HasColumnType("VARCHAR(15)");

                    b.Property<string>("State")
                        .HasColumnName("State")
                        .HasColumnType("CHAR(2)");

                    b.Property<string>("Telephone")
                        .HasColumnName("Telephone")
                        .HasColumnType("VARCHAR(18)");

                    b.Property<string>("Twitter")
                        .HasColumnName("Twitter")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Professionals");
                });

            modelBuilder.Entity("CorujasDev.Vibbra.Coworking.Domain.Models.Reserve", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("Decimal(17,2) ");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnName("DateUpdate");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnName("StartTime")
                        .HasColumnType("BIGINT ");

                    b.Property<bool>("Flag")
                        .HasColumnName("Flag")
                        .HasColumnType("Bit");

                    b.Property<Guid>("PlaceId")
                        .HasColumnName("PlaceId");

                    b.Property<Guid>("ProfessionalId");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnName("StartTime")
                        .HasColumnType("BIGINT ");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Reserves");
                });

            modelBuilder.Entity("CorujasDev.Vibbra.Coworking.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CNPJ")
                        .HasColumnName("CNPJ")
                        .HasColumnType("VARCHAR(18)");

                    b.Property<string>("CompanyName")
                        .HasColumnName("CompanyName")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnName("DateUpdate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<int>("TypeUser")
                        .HasColumnName("TypeUser")
                        .HasColumnType("INT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CorujasDev.Vibbra.Coworking.Domain.Models.Professional", b =>
                {
                    b.HasOne("CorujasDev.Vibbra.Coworking.Domain.Models.User", "User")
                        .WithOne("Professional")
                        .HasForeignKey("CorujasDev.Vibbra.Coworking.Domain.Models.Professional", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CorujasDev.Vibbra.Coworking.Domain.Models.Reserve", b =>
                {
                    b.HasOne("CorujasDev.Vibbra.Coworking.Domain.Models.Place", "Place")
                        .WithMany("Reserves")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CorujasDev.Vibbra.Coworking.Domain.Models.Professional", "Professional")
                        .WithMany("Reserves")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
